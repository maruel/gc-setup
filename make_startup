#!/usr/bin/env python
# Copyright 2015 Marc-Antoine Ruel. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

"""Creates a new startup.sh for use with create_vm for GCE VMs.

- If you are unhappy with the defaults, edit this script.
- The startup script must be less than 32Kib.
- https://cloud.google.com/compute/docs/startupscript
- It is installed on the VM at /var/run/google.startup.script
- To get logs on the VM: cat /var/log/startupscript.log

Sample usage:
  Start a godoc.org clone with an hostname on Google Domains at godoc.example.com:
    ./make_startup \\
      --gd-user <gdomains user> --gd-pwd <gdomains pwd> --gd-host godoc.example.com \\
      --go-get-url github.com/golang/gddo/gddo-server \\
      --pkg redis-server,mercurial

"""

import argparse
import os
import pipes
import socket
import sys

# pylint: disable=line-too-long

THIS_DIR = os.path.dirname(os.path.abspath(__file__))

# - git: go get github.com/foo/bar
# - ifstat: print_stats
# - libcap2-bin: sudo setcap 'cap_net_bind_service=+ep' "$GOPATH/bin/$TOOL"
# - sysstat: print_stats
DEFAULT_PKGS = 'git,ifstat,libcap2-bin,sysstat'


def header():
  """Creates the initial part of the startup script.

  Update motd to warn that the script is not done yet if the user ssh in too
  quickly.
  """
  return (
    '#!/bin/bash\n'
    '# Generated by make_startup from github.com/maruel/vm-service on ' + socket.getfqdn() + '.\n'
    '\n'
    'echo -e \'#!/bin/sh\\necho Still booting!\\necho sudo tail -f /var/log/startupscript.log\' > /etc/update-motd.d/01-header\n'
    'chmod 0755 /etc/update-motd.d/01-header\n'
    # Sorry Canonical but silence annoying motd messages and the legal prompt on
    # first ssh connection.
    'rm /etc/update-motd.d/00-header /etc/update-motd.d/10-help-text /etc/update-motd.d/51-cloudguest /etc/update-motd.d/91-release-upgrade /etc/update-motd.d/97-overlayroot || true\n'
    # TODO(maruel): This doesn't actually work; sad panda.
    'mkdir -p /etc/skel/.cache\n'
    'touch /etc/skel/.cache/motd.legal-displayed\n'
    '\n')


def footer():
  """Update motd to signal the VM is finished booting.

  touch /etc/boot.completed to signal boot is done.
  """
  return (
    'echo -e \'#!/bin/sh\\n[ -r /etc/lsb-release ] && . /etc/lsb-release\\necho Welcome to my VM on "$DISTRIB_DESCRIPTION"\' > /etc/update-motd.d/01-header\n'
    'touch /etc/boot.completed\n'
    'echo startup.sh done\n')


def general_setup(pkgs):
  """Install packages, create 'server' user, setup iptables forwarding."""
  return (
    'echo Installing ' + pkgs + '\n'
    # Sorry Canonical but I don't need these.
    'apt-get -qq remove  --purge landscape-common > /dev/null\n'
    # Install prerequisites.
    'apt-get -qq install ' + pkgs + ' > /dev/null\n'
    '\n'
    # Create a new non-root user 'server' and remove 'ubuntu'. By default on
    # Ubuntu server, the user ubuntu is a sudoer. We want a safer setup.
    'echo Fixing users\n'
    'if [ ! -d /home/server ]; then\n'
    '  useradd -m server\n'
    'fi\n'
    'if [ -d /home/ubuntu ]; then\n'
    '  deluser --remove-home ubuntu\n'
    'fi\n'
    '\n'
    # Forward port 80 to 8080 and 443 to 8443 so they can be opened as user.
    # TODO(maruel): Right now the service MUST not bind to localhost/127.0.0.1
    # otherwise the routing doesn't work. On the other hand these ports are
    # blocked by GCE's firewall by default.
    'iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\n'
    'iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443\n'
    '\n')


def github_webhooks(secret):
  """Starts a hookserve instance that listen to git pushes on port 9000.

  This project is synchronized upon VM reboot only.
  """
  return inject_script('/home/server/github_webhook.sh', """#!/bin/bash
go get -v -u github.com/phayes/hookserve/util/hookserve
hookserve --port 9000 --secret """ + pipes.quote(secret) + """ ./startup.sh &
""")


def google_cloud_logging():
  """Enables Google Cloud Logging on this startup script.

   Sadly, this uses ruby which uses a ton of RAM.
  """
  return (
    'if [ ! -f /var/log/google-fluentd/google-fluentd.log ]; then\n'
    '  echo Installing Google Cloud Logging agent\n'
    '  curl -s https://dl.google.com/cloudagents/install-logging-agent.sh|bash|&grep console.developers.google.com\n'
    '  echo ""\n'
    'fi\n'
    '\n')


def google_domains_dyndns(user, pwd, host):
  """Setups a Google Domains DynDNS."""
  url1 = 'http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip'
  url2 = 'https://%s:%s@domains.google.com/nic/update?hostname=%s&myip=$IP' % (user, pwd, host)
  return (
    'echo Updating ' + host + '\n'
    'IP="$(curl -s -H \'Metadata-Flavor: Google\' ' + url1 + ')"\n'
    'curl -s "' + url2 + '"\n'
    'echo ""\n'
    '\n')


def golang(version):
  """Downloads and installs Go from https://golang.org/dl/."""
  # TODO(maruel): Look if installed version mismatches? Probably better to
  # redeploy in that case?
  return ("""GOLANG_FILE=go""" + version + """.linux-amd64.tar.gz
if [ ! -d /usr/local/go ]; then
  echo Installing Go """ + version + """
  wget --quiet https://storage.googleapis.com/golang/$GOLANG_FILE
  tar -C /usr/local -xzf $GOLANG_FILE
  rm $GOLANG_FILE
  echo 'export GOPATH="$HOME"' >> /etc/profile
  echo 'export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"' >> /etc/profile
fi
/usr/local/go/bin/go version

""")


def go_service(url, args):
  """Writes a script to start a Golang service.

  Right now the service will restart constantly, which is not that much a big
  deal.


  TODO(maruel): Only restart an existing process when the binary changed.
  """
  tool = os.path.basename(url)
  return inject_script('/home/server/startup.sh', """#!/bin/bash
go get -v -u """ + url + """
PID="$(pgrep -x """ + tool + """)"
if [ "$PID" == "" ]; then
  echo "No previous process found; starting fresh"
  """ + tool + " " + args + " &> $HOME/" + tool + """.log &
else
  echo "Sending SIGUSR2 to $PID"
  kill -USR2 "$PID"
fi
""")


def go_github_webhooks(port):
  """Enables github webhooks via hookserve."""
  # TODO(maruel): Add.
  return ''


def inject_script(dest, script):
  """Writes an embedded script into dest and makes it executable for user
  'server'.
  """
  return (
    'cat << \'EOF_STARTUP\' > ' + dest + '\n' + script +
    'EOF_STARTUP\n'
    'chown server:server ' + dest + '\n'
    'chmod 0755 ' + dest + '\n'
    '\n')


def screen():
  """Installs sane screen defaults."""
  return (
    'if [ ! -f /usr/local/etc/screenrc ]; then\n'
    '  wget --quiet -O /usr/local/etc/screenrc https://raw.githubusercontent.com/maruel/bin_pub/master/configs/.screenrc\n'
    'fi\n'
    '\n')


def tmux():
  """Installs sane tmux defaults along with 'print_stats'."""
  return (
    'if [ ! -f /etc/tmux.conf ]; then\n'
    '  wget --quiet -O /etc/tmux.conf https://raw.githubusercontent.com/maruel/bin_pub/master/configs/.tmux.conf\n'
    '  wget --quiet -O /usr/local/bin/print_stats https://raw.githubusercontent.com/maruel/bin_pub/master/print_stats\n'
    '  chmod 0755 /usr/local/bin/print_stats\n'
    'fi\n'
    '\n')


def gen_startup(args):
  """Returns startup.sh as a str."""
  # TODO(maruel): Run a few commands in parallel to reduce latency. For example,
  # google_domains_dyndns(), golang(), screen(), tmux() can all be run in
  # parallel.
  # TODO(maruel): Reduce/control the amount of remote hosts contacted upon boot
  # to increase reliability.

  # Update motd to signal the VM is booting.
  out = header()

  if args.cloud_logging:
    out += google_cloud_logging()

  pkgs = ' '.join(filter(None, (DEFAULT_PKGS + ',' + args.pkgs).split(',')))
  out += general_setup(pkgs)

  if args.gd_user and args.gd_pwd and args.gd_host:
    out += google_domains_dyndns(args.gd_user, args.gd_pwd, args.gd_host)

  if args.go:
    out += golang(args.go_version)

  # TODO(maruel): Make this optional.
  out += screen()
  out += tmux()

  if args.go_get_url:
    out += go_service(args.go_get_url, args.go_service_args)
  if args.github_secret:
    out += github_webhooks(args.github_secret)

  # TODO(maruel): Push this log to Google Cloud Logging when enabled.
  if args.go_get_url:
    out += 'su -l server bash -c \'/home/server/startup.sh &>> /home/server/startup.log\' &\n'
  if args.github_secret:
    out += 'su -l server bash -c \'/home/server/github_webhook.sh &>> /home/server/github_webhook.log\' &\n'
  out += '\n'

  # Update motd to signal the VM is up and running.
  out += footer()
  return out


def main():
  os.chdir(THIS_DIR)
  parser = argparse.ArgumentParser(
      description=sys.modules[__name__].__doc__,
      formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument('--pkgs', default='', help='Additional packages to apt-get install; default: ' + DEFAULT_PKGS)
  parser.add_argument('--out', default='startup.sh', metavar='startup.sh', help='Output file, use \'-\' for stdout')

  group = parser.add_argument_group('Google Domains DynDNS; https://support.google.com/domains/answer/6147083')
  group.add_argument('--gd-user', help='As shown at https://domains.google.com/registrar')
  group.add_argument('--gd-pwd')
  group.add_argument('--gd-host', metavar='foo.example.com')

  group = parser.add_argument_group('Go; https://golang.org')
  group.add_argument('--go', action='store_true', default=True, help='Install Go (default)')
  group.add_argument('--no-go', action='store_false', dest='go', help='Do not install Go')
  group.add_argument('--go-version', default='1.5.1', metavar='1.5.1', help='Go version to install')

  group = parser.add_argument_group('go get a Webserver; Implies https://github.com/facebookgo/grace/gracehttp')
  group.add_argument(
      '--go-get-url', metavar='github.com/foo/bar',
      help='Go service URL you want to go get on start. Must bind to [::]:8080 and/or [::]:8443')
  group.add_argument(
      '--go-service-args', metavar='<args to pass to service>', default='',
      help='Arguments to pass to the service, e.g. \'-port 8080\'')
  group.add_argument(
      '--github-secret',
      help='Enable github webhooks to automatically restart the Golang service. Generate a secret with \'apg -m 32 -a 1\'')

  group = parser.add_argument_group('Google Cloud Logging; https://cloud.google.com/logging/docs/agent/')
  group.add_argument('--cloud-logging', action='store_true', default=True, help='Enables Google Cloud Logging (default)')
  group.add_argument('--no-cloud-logging', action='store_false', dest='cloud_logging')

  args = parser.parse_args()

  if len(sys.argv) == 1:
    print >> sys.stderr, 'Warning: no argument was passed, did you mean --help?'

  # http://haydenjames.io/strip-amazon-linux-ec2-maximize-available-ram/ has
  # some silly ideas to further trim down memory usage.
  content = gen_startup(args)
  if len(content) > 32768:
    parser.error('Resulting script is too large: %d > 32768 bytes' % len(content))

  if args.out == '-':
    sys.stdout.write(content)
  else:
    with open(args.out, 'wb') as f:
      f.write(content)
  return 0


if __name__ == '__main__':
  sys.exit(main())
